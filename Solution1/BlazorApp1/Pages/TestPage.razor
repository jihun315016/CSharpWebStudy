@page "/TestPage"

@using ClassLibrary1
@inject IJSRuntime JsRuntime

<h3>TestPage</h3>

<div>
    <span>Name</span>
    <input type="text" @bind="inputName" />
</div>

<div>
    <span>Hobby</span>
    <input type="text" @bind="inputPrice" />
</div>

<button @onclick="async () => await GetBindData(inputName, Convert.ToInt32(inputPrice))">Send Button</button>
<button @onclick="GetRequest">GetRequest Button</button>


@code {
    private string? inputName;
    private string? inputPrice;

    protected async Task GetBindData(string name, int price)
    {
        Coffee person = new Coffee()
        {
            Name = name,
            Price = price
        };

        // 예외 처리 부분 생략
        HttpClient client = new HttpClient();

        var response = await client.PostAsJsonAsync<Coffee>("https://localhost:7075/api/Coffee/post", person);

        if (response.IsSuccessStatusCode)
        {
            // 성공
            await JsRuntime.InvokeVoidAsync("alert", "성공");
        }
        else
        {
            // 실패
            await JsRuntime.InvokeVoidAsync("alert", "실패");
        }
    }

    protected async Task GetRequest()
    {
        HttpClient client = new HttpClient();
        var response = await client.GetAsync("https://localhost:7075/api/Coffee/get?id=3");
        var content = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // 대소문자 구분 안 함 옵션           
            var options = new System.Text.Json.JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
            };

            // 아래 두 개는 똑같은 코드
            var coffee1 = System.Text.Json.JsonSerializer.Deserialize<IEnumerable<Coffee>>(content, options);
            var coffee2 = Newtonsoft.Json.JsonConvert.DeserializeObject<IEnumerable<Coffee>>(content);
            await JsRuntime.InvokeVoidAsync("alert", "성공");
        }
        else
        {
            // 실패
            await JsRuntime.InvokeVoidAsync("alert", "실패");
        }
    }
}